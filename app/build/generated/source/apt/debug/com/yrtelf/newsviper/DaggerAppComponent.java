// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.yrtelf.newsviper;

import android.app.Application;
import com.google.gson.Gson;
import com.yrtelf.newsviper.feature.news.NewsActivity;
import com.yrtelf.newsviper.feature.news.NewsActivity_MembersInjector;
import com.yrtelf.newsviper.feature.news.NewsInteractor;
import com.yrtelf.newsviper.feature.news.NewsInteractor_Factory;
import com.yrtelf.newsviper.feature.news.NewsInteractor_MembersInjector;
import com.yrtelf.newsviper.feature.news.NewsPresenter;
import com.yrtelf.newsviper.feature.news.NewsPresenter_Factory;
import com.yrtelf.newsviper.feature.news.NewsPresenter_MembersInjector;
import com.yrtelf.newsviper.feature.source.SourcesActivity;
import com.yrtelf.newsviper.feature.source.SourcesActivity_MembersInjector;
import com.yrtelf.newsviper.feature.source.SourcesInteractor;
import com.yrtelf.newsviper.feature.source.SourcesInteractor_Factory;
import com.yrtelf.newsviper.feature.source.SourcesInteractor_MembersInjector;
import com.yrtelf.newsviper.feature.source.SourcesPresenter;
import com.yrtelf.newsviper.feature.source.SourcesPresenter_Factory;
import com.yrtelf.newsviper.feature.source.SourcesPresenter_MembersInjector;
import com.yrtelf.newsviper.model.api.NewsApi;
import com.yrtelf.newsviper.modules.AndroidModule;
import com.yrtelf.newsviper.modules.AndroidModule_ProvideApplicationFactory;
import com.yrtelf.newsviper.modules.ApiModule;
import com.yrtelf.newsviper.modules.ApiModule_ProvidesNewsApiFactory;
import com.yrtelf.newsviper.modules.NetModule;
import com.yrtelf.newsviper.modules.NetModule_ProvideGsonFactory;
import com.yrtelf.newsviper.modules.NetModule_ProvideHttpCacheFactory;
import com.yrtelf.newsviper.modules.NetModule_ProvidesOkHttpClientFactory;
import com.yrtelf.newsviper.modules.RetrofitModule;
import com.yrtelf.newsviper.modules.RetrofitModule_ProvidesRetrofitFactory;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Application> provideApplicationProvider;

  private Provider<Cache> provideHttpCacheProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<NewsApi> providesNewsApiProvider;

  private MembersInjector<SourcesInteractor> sourcesInteractorMembersInjector;

  private Provider<SourcesInteractor> sourcesInteractorProvider;

  private MembersInjector<SourcesPresenter> sourcesPresenterMembersInjector;

  private Provider<SourcesPresenter> sourcesPresenterProvider;

  private MembersInjector<SourcesActivity> sourcesActivityMembersInjector;

  private MembersInjector<NewsInteractor> newsInteractorMembersInjector;

  private Provider<NewsInteractor> newsInteractorProvider;

  private MembersInjector<NewsPresenter> newsPresenterMembersInjector;

  private Provider<NewsPresenter> newsPresenterProvider;

  private MembersInjector<NewsActivity> newsActivityMembersInjector;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideApplicationProvider =
        DoubleCheck.provider(AndroidModule_ProvideApplicationFactory.create(builder.androidModule));

    this.provideHttpCacheProvider =
        DoubleCheck.provider(
            NetModule_ProvideHttpCacheFactory.create(
                builder.netModule, provideApplicationProvider));

    this.providesOkHttpClientProvider =
        DoubleCheck.provider(
            NetModule_ProvidesOkHttpClientFactory.create(
                builder.netModule, provideHttpCacheProvider));

    this.provideGsonProvider =
        DoubleCheck.provider(NetModule_ProvideGsonFactory.create(builder.netModule));

    this.providesRetrofitProvider =
        DoubleCheck.provider(
            RetrofitModule_ProvidesRetrofitFactory.create(
                builder.retrofitModule, providesOkHttpClientProvider, provideGsonProvider));

    this.providesNewsApiProvider =
        DoubleCheck.provider(
            ApiModule_ProvidesNewsApiFactory.create(builder.apiModule, providesRetrofitProvider));

    this.sourcesInteractorMembersInjector =
        SourcesInteractor_MembersInjector.create(providesNewsApiProvider);

    this.sourcesInteractorProvider =
        SourcesInteractor_Factory.create(sourcesInteractorMembersInjector);

    this.sourcesPresenterMembersInjector =
        SourcesPresenter_MembersInjector.create(sourcesInteractorProvider);

    this.sourcesPresenterProvider =
        SourcesPresenter_Factory.create(sourcesPresenterMembersInjector);

    this.sourcesActivityMembersInjector =
        SourcesActivity_MembersInjector.create(sourcesPresenterProvider);

    this.newsInteractorMembersInjector =
        NewsInteractor_MembersInjector.create(providesNewsApiProvider);

    this.newsInteractorProvider = NewsInteractor_Factory.create(newsInteractorMembersInjector);

    this.newsPresenterMembersInjector =
        NewsPresenter_MembersInjector.create(newsInteractorProvider);

    this.newsPresenterProvider = NewsPresenter_Factory.create(newsPresenterMembersInjector);

    this.newsActivityMembersInjector = NewsActivity_MembersInjector.create(newsPresenterProvider);
  }

  @Override
  public void inject(SourcesActivity activity) {
    sourcesActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(NewsActivity activity) {
    newsActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private AndroidModule androidModule;

    private NetModule netModule;

    private RetrofitModule retrofitModule;

    private ApiModule apiModule;

    private Builder() {}

    public AppComponent build() {
      if (androidModule == null) {
        throw new IllegalStateException(AndroidModule.class.getCanonicalName() + " must be set");
      }
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      if (retrofitModule == null) {
        this.retrofitModule = new RetrofitModule();
      }
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder netModule(NetModule netModule) {
      this.netModule = Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder androidModule(AndroidModule androidModule) {
      this.androidModule = Preconditions.checkNotNull(androidModule);
      return this;
    }
  }
}
